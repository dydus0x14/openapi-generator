//
// StoreAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
// Run in root folder to build example mvn clean package -DskipTests; ./bin/generate-samples.sh bin/configs/swift-alt-petstore-new.yaml

import Foundation
import Combine
// import Runtime


open class StoreAPI {
    private let encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()
    private let decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    private let transport: Transport

    public init(_ transport: Transport) {
        self.transport = transport
    }

    /**
        Delete purchase order by ID
        - DELETE /store/order/{orderId}
        - For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        - parameter orderId: (path) ID of the order that needs to be deleted 
        - returns: AnyPublisher<Result<Void, Error>, Never> 
        */
    open func deleteOrder(orderId: String) -> AnyPublisher<Result<Void, Error>, Never> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order/{orderId}"
            .replacingOccurrences(of: "{orderId}", with: "\(orderId)")
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        
        
        // Getting auth type 
        let securityScheme: SecurityScheme = .none
        return transport.send(request: request, securityScheme: securityScheme)
            .map { response -> Result<Void, Error> in
                if response.response?.statusCode == 200 {
                    return .success(())
                } else {
                    return .failure(response.error ?? TransportError.unknown)
                }
            }
            .eraseToAnyPublisher()
    }

    /**
        Returns pet inventories by status
        - GET /store/inventory
        - Returns a map of status codes to quantities
        - API Key:
        - type: apiKey api_key 
        - name: api_key
        - returns: AnyPublisher<Result<[String: Int], Error>, Never> 
        */
    open func getInventory() -> AnyPublisher<Result<[String: Int], Error>, Never> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/inventory"
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        
        // Getting auth type 
        let securityScheme: SecurityScheme = .none
        return transport.send(request: request, securityScheme: securityScheme)
            .map { response -> Result<[String: Int], Error> in
                if response.response?.statusCode == 200 {
                    if let data = response.data {
                        return Result { try self.decoder.decode([String: Int].self, from: data) }
                    } else {
                        return .failure(TransportError.unknown)
                    }
                } else {
                    return .failure(response.error ?? TransportError.unknown)
                }
            }
            .eraseToAnyPublisher()
    }

    /**
        Find purchase order by ID
        - GET /store/order/{orderId}
        - For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
        - parameter orderId: (path) ID of pet that needs to be fetched 
        - returns: AnyPublisher<Result<Order, Error>, Never> 
        */
    open func getOrderById(orderId: Int64) -> AnyPublisher<Result<Order, Error>, Never> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order/{orderId}"
            .replacingOccurrences(of: "{orderId}", with: "\(orderId)")
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        
        // Getting auth type 
        let securityScheme: SecurityScheme = .none
        return transport.send(request: request, securityScheme: securityScheme)
            .map { response -> Result<Order, Error> in
                if response.response?.statusCode == 200 {
                    if let data = response.data {
                        return Result { try self.decoder.decode(Order.self, from: data) }
                    } else {
                        return .failure(TransportError.unknown)
                    }
                } else {
                    return .failure(response.error ?? TransportError.unknown)
                }
            }
            .eraseToAnyPublisher()
    }

    /**
        Place an order for a pet
        - POST /store/order
        - parameter order: (body) order placed for purchasing the pet 
        - returns: AnyPublisher<Result<Order, Error>, Never> 
        */
    open func placeOrder(order: Order) -> AnyPublisher<Result<Order, Error>, Never> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order"
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        // Setting body parameters 
        request.httpBody = try? encoder.encode(order)
        // Getting auth type 
        let securityScheme: SecurityScheme = .none
        return transport.send(request: request, securityScheme: securityScheme)
            .map { response -> Result<Order, Error> in
                if response.response?.statusCode == 200 {
                    if let data = response.data {
                        return Result { try self.decoder.decode(Order.self, from: data) }
                    } else {
                        return .failure(TransportError.unknown)
                    }
                } else {
                    return .failure(response.error ?? TransportError.unknown)
                }
            }
            .eraseToAnyPublisher()
    }
}


private class OpenISO8601DateFormatter: DateFormatter {
    static let withoutSeconds: DateFormatter = {
        let formatter = DateFormatter()
        formatter.calendar = Calendar(identifier: .iso8601)
        formatter.locale = Locale(identifier: "en_US_POSIX")
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
        return formatter
    }()

    private func setup() {
        calendar = Calendar(identifier: .iso8601)
        locale = Locale(identifier: "en_US_POSIX")
        timeZone = TimeZone(secondsFromGMT: 0)
        dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
    }

    override init() {
        super.init()
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    override func date(from string: String) -> Date? {
        if let result = super.date(from: string) {
            return result
        }
        return OpenISO8601DateFormatter.withoutSeconds.date(from: string)
    }
}