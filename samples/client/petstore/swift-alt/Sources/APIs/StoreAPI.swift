//
// StoreAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
// Run in root folder to build example mvn clean package -DskipTests; ./bin/generate-samples.sh bin/configs/swift-alt-petstore-new.yaml

import Foundation
import Combine
// import Runtime


open class StoreAPI {
    private static let encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()
    private static let decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    private let transport: Transport

    public init(_ transport: Transport) {
        self.transport = transport
    }

    /**
        Delete purchase order by ID
        - DELETE /store/order/{orderId}
        - For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        - parameter orderId: (path) ID of the order that needs to be deleted 
        - returns: AnyPublisher<Void, Error> 
        */
    open func deleteOrder(orderId: String) -> AnyPublisher<Void, Error> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order/{orderId}"
            .replacingOccurrences(of: "{orderId}", with: "\(orderId)")
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        
        
        // Getting auth type 
        let securitySchemes: [SecurityScheme] = []
        return transport.send(request: request, securitySchemes: securitySchemes)
            .tryMap { response in
                return ()
            }
            .eraseToAnyPublisher()
    }

    /**
        Returns pet inventories by status
        - GET /store/inventory
        - Returns a map of status codes to quantities
        - API Key:
        - type: apiKey api_key 
        - name: api_key
        - returns: AnyPublisher<[String: Int], Error> 
        */
    open func getInventory() -> AnyPublisher<[String: Int], Error> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/inventory"
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        
        // Getting auth type 
        let securitySchemes: [SecurityScheme] = []
        return transport.send(request: request, securitySchemes: securitySchemes)
            .tryMap { response in
                try StoreAPI.decoder.decode([String: Int].self, from: response.data)
            }
            .eraseToAnyPublisher()
    }

    /**
        Find purchase order by ID
        - GET /store/order/{orderId}
        - For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
        - parameter orderId: (path) ID of pet that needs to be fetched 
        - returns: AnyPublisher<Order, Error> 
        */
    open func getOrderById(orderId: Int64) -> AnyPublisher<Order, Error> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order/{orderId}"
            .replacingOccurrences(of: "{orderId}", with: "\(orderId)")
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        
        // Getting auth type 
        let securitySchemes: [SecurityScheme] = []
        return transport.send(request: request, securitySchemes: securitySchemes)
            .tryMap { response in
                try StoreAPI.decoder.decode(Order.self, from: response.data)
            }
            .eraseToAnyPublisher()
    }

    /**
        Place an order for a pet
        - POST /store/order
        - parameter order: (body) order placed for purchasing the pet 
        - returns: AnyPublisher<Order, Error> 
        */
    open func placeOrder(order: Order) -> AnyPublisher<Order, Error> {
        // Creating final URL with query items and path
        var components = URLComponents()
        components.path = "/store/order"
        
        guard let url = components.url(relativeTo: transport.baseURL) else {
            fatalError("URL is nil")
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        // Setting body parameters 
        request.httpBody = try? StoreAPI.encoder.encode(order)
        if request.value(forHTTPHeaderField: "Content-Type") == nil {
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        }
        
        // Getting auth type 
        let securitySchemes: [SecurityScheme] = []
        return transport.send(request: request, securitySchemes: securitySchemes)
            .tryMap { response in
                try StoreAPI.decoder.decode(Order.self, from: response.data)
            }
            .eraseToAnyPublisher()
    }
}
