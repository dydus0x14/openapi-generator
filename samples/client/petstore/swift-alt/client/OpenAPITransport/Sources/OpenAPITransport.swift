// OpenAPITransport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine

// MARK: - Open API Scheme

public enum SecurityScheme {
    case bearer
    // Other schemes not supported yet https://swagger.io/docs/specification/authentication/
}

// MARK: - Authenticator

public protocol Authenticator {
    func authenticate(request: URLRequest, securitySchemes: [SecurityScheme]) -> AnyPublisher<URLRequest, Error>
    func refresh(securitySchemes: [SecurityScheme]) -> AnyPublisher<Void, Error>
}

/// Authenticator which does not authenticate requests and does not refresh it
open class EmptyAuthenticator: Authenticator {
    public func authenticate(request: URLRequest, securitySchemes: [SecurityScheme]) -> AnyPublisher<URLRequest, Error> {
        Just(request)
            .setFailureType(to: Error.self)
            .eraseToAnyPublisher()
    }

    public func refresh(securitySchemes: [SecurityScheme]) -> AnyPublisher<Void, Error> {
        Just(())
            .setFailureType(to: Error.self)
            .eraseToAnyPublisher()
    }

    public init() {
    }
}

// MARK: - OpenAPITransport

public protocol OpenAPITransport {
    var baseURL: URL? { get }

    func send(
        request: URLRequest,
        securitySchemes: [SecurityScheme]
    ) -> AnyPublisher<OpenAPITransportResponse, OpenAPITransportError>

    func cancelAll()
}

public struct OpenAPITransportResponse {
    public let data: Data
    public let statusCode: Int

    public init(data: Data, statusCode: Int) {
        self.data = data
        self.statusCode = statusCode
    }
}

public struct OpenAPITransportError: Error, CustomStringConvertible, LocalizedError {
    public let statusCode: Int
    public let description: String
    public let errorDescription: String?
    // It might be source network error
    public let nestedError: Error?
    // Data may contain additional reason info (like json payload)
    public let data: Data

    public init(
        statusCode: Int,
        description: String? = nil,
        errorDescription: String? = nil,
        nestedError: Error? = nil,
        data: Data = Data()
    ) {
        self.statusCode = statusCode
        self.errorDescription = errorDescription
        self.nestedError = nestedError
        self.data = data
        if let description = description {
            self.description = description
        } else {
            var summary = "OpenAPITransportError with status \(statusCode)"
            if let nestedError = nestedError {
                summary.append(contentsOf: ", \(nestedError.localizedDescription)")
            }
            self.description = summary
        }
    }
}

// Custom transport errors. It begins with 6.. not to conflict with HTTP codes (it begins with 5..)
public extension OpenAPITransportError {
    static let incorrectAuthenticationCode = 600
    static func incorrectAuthenticationError(_ nestedError: Error? = nil) -> OpenAPITransportError {
        OpenAPITransportError(
            statusCode: OpenAPITransportError.incorrectAuthenticationCode,
            description: "Impossible to add authentication headers to request",
            errorDescription: NSLocalizedString(
                "Impossible to add authentication headers to request",
                comment: "Incorrect authentication"
            ),
            nestedError: nestedError
        )
    }

    static let failedAuthenticationRefreshCode = 601
    static func failedAuthenticationRefreshError(_ nestedError: Error? = nil) -> OpenAPITransportError {
        OpenAPITransportError(
            statusCode: OpenAPITransportError.failedAuthenticationRefreshCode,
            description: "Error while refreshing authentication",
            errorDescription: NSLocalizedString(
                "Error while refreshing authentication",
                comment: "Failed authentication refresh"
            ),
            nestedError: nestedError
        )
    }

    static let noResponseCode = 603
    static func noResponseError(_ nestedError: Error? = nil) -> OpenAPITransportError {
        OpenAPITransportError(
            statusCode: OpenAPITransportError.noResponseCode,
            description: "There is no HTTP URL response",
            errorDescription: NSLocalizedString(
                "There is no HTTP URL response",
                comment: "No response"
            ),
            nestedError: nestedError
        )
    }

    static let badURLCode = 604
    static func badURLError(_ nestedError: Error? = nil) -> OpenAPITransportError {
        OpenAPITransportError(
            statusCode: OpenAPITransportError.badURLCode,
            description: "Request URL cannot be created with given parameters",
            errorDescription: NSLocalizedString(
                "Request URL cannot be created with given parameters",
                comment: "Bad URL"
            ),
            nestedError: nestedError
        )
    }
}

public protocol URLSessionOpenAPITransportDelegate: AnyObject {
    func willStart(request: URLRequest)
    func didFinish(request: URLRequest, response: HTTPURLResponse?)
}

open class URLSessionOpenAPITransport: OpenAPITransport {
    private var cancellable = Set<AnyCancellable>()
    let session: URLSession
    let authenticator: Authenticator
    // Amount of time application will refresh authentication and try performing network call again
    let authenticationRetryLimit = 1
    public let baseURL: URL?
    public weak var delegate: URLSessionOpenAPITransportDelegate?

    public init(baseURL: URL? = nil, session: URLSession = .shared, authenticator: Authenticator = EmptyAuthenticator()) {
        self.baseURL = baseURL
        self.session = session
        self.authenticator = authenticator
    }

    open func send(
        request: URLRequest, 
        securitySchemes: [SecurityScheme]
    ) -> AnyPublisher<OpenAPITransportResponse, OpenAPITransportError> {
        send(request: request, securitySchemes: securitySchemes, triesLeft: authenticationRetryLimit)
    }

    open func cancelAll() {
        cancellable.removeAll()
    }

    func send(
        request: URLRequest, 
        securitySchemes: [SecurityScheme], 
        triesLeft: Int
    ) -> AnyPublisher<OpenAPITransportResponse, OpenAPITransportError> {
        authenticator
            // Add authentication headers if needed before request
            .authenticate(request: request, securitySchemes: securitySchemes)
            .mapError {
                OpenAPITransportError.incorrectAuthenticationError($0)
            }
            .flatMap { request -> AnyPublisher<OpenAPITransportResponse, OpenAPITransportError> in
                self.delegate?.willStart(request: request)
                // Perform network call
                return URLSession.shared.dataTaskPublisher(for: request)
                    .mapError { OpenAPITransportError(statusCode: $0.code.rawValue, description: "Network call finished fails") }
                    .flatMap { output -> AnyPublisher<OpenAPITransportResponse, OpenAPITransportError> in
                        let response = output.response as? HTTPURLResponse
                        self.delegate?.didFinish(request: request, response: response)
                        switch response?.statusCode {
                        case .some(200):
                            let OpenAPITransportResponse = OpenAPITransportResponse(data: output.data, statusCode: 200)
                            return Result.success(OpenAPITransportResponse).publisher.eraseToAnyPublisher()
                        case .some(401) where triesLeft > 0:
                            // Refresh authentication if possible
                            return self.authenticator
                                .refresh(securitySchemes: securitySchemes)
                                .mapError {
                                    OpenAPITransportError.failedAuthenticationRefreshError($0)
                                }
                                .flatMap {
                                    // Try performing network call again
                                    self.send(request: request, securitySchemes: securitySchemes, triesLeft: triesLeft - 1)
                                }
                                .eraseToAnyPublisher()
                        case let .some(status):
                            let error = OpenAPITransportError(statusCode: status, data: output.data)
                            return Fail(error: error).eraseToAnyPublisher()
                        default:
                            let error = OpenAPITransportError(statusCode: OpenAPITransportError.noResponseCode, data: output.data)
                            return Fail(error: error).eraseToAnyPublisher()
                        }
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}
